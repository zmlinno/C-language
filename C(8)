#define _CRT_SECURE_NO_WARNINGS 1

#include <stdio.h>

//정수형 정렬된 배열에서 이진 탐색을 수행하는 함수를 작성하십시오.
//int binary_search(int arr[], int k, int sz)
//{
//	int left = 0;
//	int right = sz - 1;
//
//	while (left<=right)
//	{
//		int mid = (left + right) / 2;
//		if (arr[mid] < k)
//		{
//			left = mid + 1;
//		}
//		else if (arr[mid] > k)
//		{
//			right = mid - 1;
//		}
//		else
//		{
//			return mid;
//		}
//	}
//	return -1;//찾지 못한 경우
//}
//
//int main()
//{
//	int arr[] = { 1,2,3,4,5,6,17,18,19,20,21 };//10
//	//0~9
//	int k = 21;
// 찾으면 인덱스를 반환
// 찾지 못하면 -1을 반환
// 배열 요소 수 계산
//	// 
//	//printf("%d\n", sizeof(arr));// 40, 여기서 배열 전체 크기를 계산하며, 단위는 바이트입니다.
//	//printf("%d\n", sizeof(arr[0]));//4，// 4, 여기서는 배열의 첫 번째 요소의 크기를 계산하며, 단위는 바이트입니다.
//	int sz = sizeof(arr) / sizeof(arr[0]);
//	int pos = binary_search(arr, k, sz);
//	if (-1 == pos)
//		printf("찾지 못했습니다\n");
//	else
//		printf("찾았습니다. 인덱스는:%d\n", pos);
//
//	return 0;
//}
//

//void Add(int* p)
//{
//	//*p = *p+1;
//	(*p)++;
//}
//
//int main()
//{
//	int num = 0;
//	Add(&num);
//	printf("%d\n", num);//1
//	Add(&num);
//	printf("%d\n", num);//2
//	Add(&num);
//	printf("%d\n", num);//3
//	return 0;
//}

//int Add(int n)
//{
//	return n + 1;
//}
//
//int main()
//{
//	int num = 0;
//	num = Add(num);
//	printf("%d\n", num);
//
//	num = Add(num);
//	printf("%d\n", num);
//
//	num = Add(num);
//	printf("%d\n", num);
//
//	return 0;
//}

//함수의 반환 형식을 작성하지 않으면 기본적으로 int 형식을 반환합니다
//int test(void)
//{
//	printf("hehe\n");
//}
//
//int main()
//{
//	int ret = test();
//	printf("%d\n", ret);
//
//	return 0;
//}

//int Add(int x, int y)
//{
//	return x + y;
//}
//
//int main()
//{
//	Add(2, 3);
//	return 0;
//}

// 연쇄 접근 
//#include <string.h>
//
//int main()
//{
//	//int len = strlen("abcdef");
//	printf("%d\n", strlen("abcdef"));
//
//	return 0;
//}

//int main()
//{
//	printf("%d", printf("%d", printf("%d", 43)));
//
//	return 0;
//}
//


// 함수 선언
//int Add(int x, int y);
//
//int main()
//{
//	int a = 0;
//	int b = 0;
//	scanf("%d %d", &a, &b);
 // 합 구하기
//	int ret = Add(a, b);
//	printf("%d\n", ret);
//
//	return 0;
//}
//
//
// // 함수 정의
// // 함수 정의는 특별한 형태의 선언입니다.
//int Add(int x, int y)
//{
//	return x + y;
//}
//
//
//#include "add.h"
//
 // 정적 라이브러리 임포트
//#pragma comment(lib, "add.lib")
//
//int main()
//{
//	int a = 0;
//	int b = 0;
//	scanf("%d %d", &a, &b);
 // 합 구하기
//	int ret = Add(a, b);
//	printf("%d\n", ret);
//
//	return 0;
//}

// 변수 선언
//int g_val;
//
//int main()
//{
//	printf("g_val = %d\n", g_val);
//
//	return 0;
//}
//
// // 변수 정의
//int g_val = 2022;


//int g_val;
//
//int main()
//{
//	printf("g_val = %d\n", g_val);
//
//	return 0;
//}
//
// // 변수 정의
//int g_val = 2022;

// 정의
//int val;
// 전역 변수는 초기화되지 않으면 기본적으로 0입니다.
//int main()
//{
//	printf("%d\n", val);
//	return 0;
//}
//

//int main()
//{
//	printf("hehe\n");
//	main();
//
//	return 0;
//}

//void Print(unsigned int n)
//{
//	while (n)
//	{
//		printf("%d ", n % 10);
//		n = n / 10;
//	}
//}

//void Print(unsigned int n)
//{
//	if (n > 9)
//	{
//		Print(n/10);
//	}
//	printf("%d ", n % 10);
//}
//
//int main()
//{
//	unsigned int num = 0;
//	scanf("%u", &num);
//	//写一个函数打印num的每一位
//	Print(num);
//	return 0;
//}

//
//숫자의 각 자릿수를 출력하는 함수를 작성하십시오.
//

#include <string.h>
//模拟实现strlen
//
//int my_strlen(char* str)
//{
//	int count = 0;
//	while (*str != '\0')
//	{
//		count++;
//		str++;// 정수 포인터에 +1을 하면, 한 개의 정수 크기(4바이트)만큼 앞으로 이동합니다.
//	}
//	return count;
//}

int my_strlen(char* str)
{
	if (*str != '\0')
		return 1 + my_strlen(str + 1);
	else
		return 0;
}

int main()
{
	char arr[] = "bit";
	//[b i t \0]
	// 문자 포인터에 +1을 하여 한 문자 크기만큼 앞으로 이동합니다.
	//
	int len = my_strlen(arr);
	printf("%d\n", len);

	return 0;
}
