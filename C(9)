#define _CRT_SECURE_NO_WARNINGS 1
#include <stdio.h>
//
//int main()
//{
// //char ch = 'w';
// //char* pc = &ch;
//
// const char* p = "abcdef";
// //p = 'w';
// printf("%s\n", p);
//
// return 0;
//}
//
//#include <stdio.h>
//int main()
//{
// char str1[] = "hello bit.";
// char str2[] = "hello bit.";
//
// const char str3 = "hello bit.";
// const char* str4 = "hello bit.";
//
// if (str1 == str2)
// printf("str1 and str2 are same\n");
// else
// printf("str1 and str2 are not same\n");
//
// if (str3 == str4)
// printf("str3 and str4 are same\n");
// else
// printf("str3 and str4 are not same\n");
//
// return 0;
//}

//포인터 배열

//정수형 배열 - 정수를 저장하는 배열
//문자 배열 - 문자를 저장하는 배열
//포인터 배열 - 포인터(주소)를 저장하는 배열

//int main()
//{
// //문자 포인터를 저장하는 배열
// const char* arr[4] = { "abcdef","qwer", "hello bit", "hehe" };
// int i = 0;
// for (i = 0; i < 4; i++)
// {
// printf("%s\n", arr[i]);
// }
//
// return 0;
//}
//
//int main()
//{
// int arr1[5] = { 1,2,3,4,5 };
// int arr2[5] = { 2,3,4,5,6 };
// int arr3[5] = { 3,4,5,6,7 };
// int arr4[5] = { 0,0,0,0,0 };
// //포인터 배열
// int* arr[4] = {arr1, arr2, arr3, arr4};
// int i = 0;
// for (i = 0; i < 4; i++)
// {
// int j = 0;
// for (j = 0; j < 5; j++)
// {
// printf("%d ", *(arr[i] + j));//arr[i][j]
// }
// printf("\n");
// }
//
// return 0;
//}
//

//int main()
//{
// char ch = 'w';
// char* pc = &ch;
//
// int num = 10;
// int* pi = #
//
// int arr[10];
//
// //pa는 배열 포인터
// int (*pa)[10] = &arr;
//
// return 0;
//}

//
//int main()
//{
// //int a = 10;
// //int *pa = &a;
//
// //int arr[10] = {1,2,3,4,5,6,7,8,9,10};
// ////&arr은 배열의 주소이며 배열을 받을 변수는 배열의 주소를 받아야 합니다.
// //int (p)[10] = &arr;
// // //int
// ////int(*p2)[10] = arr;//
// 배열 이름 - 배열의 첫 번째 요소의 주소입니다.
// &배열 이름 - 배열의 주소입니다.
// 값의 관점에서 배열의 첫 번째 요소의 주소와 배열의 주소는 동일해 보이지만 의미는 다릅니다.

// printf("%p\n", arr); // int*
// printf("%p\n", arr + 1); // 4

// printf("%p\n", &arr[0]); // int*
// printf("%p\n", &arr[0] + 1); // 4

// printf("%p\n", &arr); // int(*)[10]
// printf("%p\n", &arr + 1); // 40

// char arr[5];
// char (*pc)[5] = &arr;

// return 0;
//

// int main()
// {
// /*int arr[10] = { 1,2,3,4,5,6,7,8,9,10 };
//
// int (*p)[10] = &arr;
// int i = 0;
// for (i = 0; i < 10; i++)
// {
// printf("%d ", (p)[i]);
// //arr[i]
// }/
//
//
// /intp = arr;
// int i = 0;
// for (i = 0; i < 10; i++)
// {
// printf("%d ", (p + i));
// }/
//
// return 0;
// }

// void print1(int arr[3][4], int r, int c)
// {
// int i = 0;
// for (i = 0; i < r; i++)
// {
// int j = 0;
// for (j = 0; j < c; j++)
// {
// printf("%d ", arr[i][j]);
// }
// printf("\n");
// }
// }
//
// void print2(int(p)[4], int r, int c)
// {
// int i = 0;
// for (i = 0; i < r; i++)
// {
// int j = 0;
// for (j = 0; j < c; j++)
// {
// //printf("%d ", ((p + i))[j]);
// printf("%d ", p[i][j]);
// }
// printf("\n");
// }
// }
//
// int main()
// {
// int arr[3][4] = { {1,2,3,4}, {2,3,4,5} , {3,4,5,6} };
// //print1(arr, 3, 4);
// print2(arr, 3, 4);
//
// return 0;
// }

// int Add(int x, int y)
// {
// return x + y;
// }
//
// int main()
// {
// //printf("%p\n", &Add);
// //int arr[10];
// //int (*pa)[10] = &arr;
//
// //int (*pf)(int, int) = &Add;
// int (*pf)(int, int) = Add;
// //int ret = Add(2, 3);
// int ret = pf(2, 3);
//
// printf("%d\n", ret);
// int (*pf)(int, int) = Add;
// // &함수명과 함수명은 모두 함수의 주소입니다.
// // pf는 함수 주소를 저장하는 포인터 변수인 함수 포인터입니다.
// return 0;
//

// int (*pf)(int, int) = Add;
// // &함수명과 함수명은 모두 함수의 주소입니다.
// // pf는 함수 주소를 저장하는 포인터 변수인 함수 포인터입니다.
// return 0;
//( *( void (*)() ) 0 )();
// // "C Traps and Pitfalls" 참고
//
// typedef unsigned int uint;
//
// typedef void(pf_t)(int) ;
// pf_t signal(int, pf_t);

//	void (* signal( int, void(*)(int) ) )(int);
// // 해당 코드는 함수 선언입니다.
// // 선언된 함수의 이름은 signal입니다.
// // signal 함수는 2개의 매개변수를 가지며, 첫 번째는 int 형식이고, 두 번째는 int를 매개변수로 가지는 함수 포인터 형식입니다.
// // 반환 형식은 void입니다.
// // signal 함수의 반환 형식은 int를 매개변수로 가지는 함수 포인터이고, 반환 형식은 void입니다.

// //
//void (*)(int) signal(int, void(*)(int));
//
// return 0;
// }

